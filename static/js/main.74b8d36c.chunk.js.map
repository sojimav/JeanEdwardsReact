{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["MovieSearch","query","setQuery","useState","results","setResults","latestSearches","setLatestSearches","JSON","parse","localStorage","getItem","React","createElement","style","padding","type","value","onChange","e","target","placeholder","width","onClick","async","response","axios","get","data","search","updatedSearches","slice","setItem","stringify","error","console","marginLeft","LatestSearches","searches","length","SearchResults","_ref","marginTop","map","index","key","_ref2","gridStyle","movie","imdbID","cardStyle","Link","to","textDecoration","color","src","poster","alt","title","imageStyle","titleStyle","year","display","gridTemplateColumns","gap","background","border","borderRadius","textAlign","transition","fontWeight","MovieDetails","useParams","setMovie","useEffect","fetchMovieDetails","plot","imdbRating","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.74b8d36c.chunk.js","sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link, useParams } from 'react-router-dom';\nimport axios from 'axios';\n\n// Main App Component\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <Routes>\n          <Route path=\"/\" element={<MovieSearch />} />\n          <Route path=\"/movie/:imdbID\" element={<MovieDetails />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n};\n\n// Movie Search Component\nconst MovieSearch = () => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [latestSearches, setLatestSearches] = useState(JSON.parse(localStorage.getItem('latestSearches')) || []);\n\n  const handleSearch = async () => {\n    if (!query) return;\n\n    try {\n      // Call the backend API\n      const response = await axios.get(`https://jeanedwards.onrender.com/api/Movies/search?Search=${query}`);\n      setResults(response.data.search || []);\n      \n      // Save search query to local storage\n      const updatedSearches = [query, ...latestSearches].slice(0, 5);\n      setLatestSearches(updatedSearches);\n      localStorage.setItem('latestSearches', JSON.stringify(updatedSearches));\n      \n      setQuery(''); // Clear the input field\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Movie Search</h1>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        placeholder=\"Search movies by title\"\n        style={{ padding: '10px', width: '300px' }}\n      />\n      <button onClick={handleSearch} style={{ padding: '10px', marginLeft: '10px' }}>Search</button>\n\n      <LatestSearches searches={latestSearches} />\n\n      {results.length > 0 && <SearchResults results={results} />}\n    </div>\n  );\n};\n\n// Latest Searches Component\nconst LatestSearches = ({ searches }) => {\n  return (\n    <div style={{ marginTop: '20px' }}>\n      <h3>Latest Searches</h3>\n      <ul>\n        {searches.map((search, index) => (\n          <li key={index}>{search}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// Search Results Component\n\nconst SearchResults = ({ results }) => {\n  return (\n    <div style={{ marginTop: '20px' }}>\n      <h2>Search Results</h2>\n      <div style={gridStyle}>\n        {results.map((movie) => (\n          <div key={movie.imdbID} style={cardStyle}>\n            <Link to={`/movie/${movie.imdbID}`} style={{ textDecoration: 'none', color: 'black' }}>\n              <img src={movie.poster} alt={movie.title} style={imageStyle} />\n              <p style={titleStyle}>{movie.title} ({movie.year})</p>\n            </Link>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n\n// Styles\nconst gridStyle = {\n  display: 'grid',\n  gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n  gap: '20px',\n};\n\nconst cardStyle = {\n  background: '#f9f9f9',\n  border: '1px solid #ddd',\n  borderRadius: '5px',\n  padding: '10px',\n  textAlign: 'center',\n  transition: 'transform 0.2s',\n};\n\nconst imageStyle = {\n  width: '100%',\n  borderRadius: '5px',\n};\n\nconst titleStyle = {\n  marginTop: '10px',\n  fontWeight: 'bold',\n};\n\n\nconst handleHover = (event) => {\n  event.currentTarget.style.transform = 'scale(1.05)';\n};\n\nconst handleLeave = (event) => {\n  event.currentTarget.style.transform = 'scale(1)';\n};\n\nconst cardHoverEffect = () => {\n  const cards = document.querySelectorAll('div[style*=\"padding:10px\"]');\n  cards.forEach(card => {\n    card.addEventListener('mouseover', handleHover);\n    card.addEventListener('mouseleave', handleLeave);\n  });\n};\n\n\n// Movie Details Component\nconst MovieDetails = () => {\n  const { imdbID } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      const response = await axios.get(`https://jeanedwards.onrender.com/api/Movies/details/${imdbID}`);\n      setMovie(response.data);\n    };\n\n    fetchMovieDetails();\n  }, [imdbID]);\n\n  if (!movie) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>{movie.title}</h1>\n      <img src={movie.poster} alt={movie.title} style={{ width: '200px' }} />\n      <p><strong>Plot:</strong> {movie.plot || 'N/A'}</p>\n      <p><strong>IMDb Rating:</strong> {movie.imdbRating || 'N/A'}</p>\n      <p><strong>Year:</strong> {movie.year}</p>\n    </div>\n  )\n};\n\n export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}